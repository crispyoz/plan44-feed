--- /dev/null
+++ b/target/linux/ramips/patches-4.14/0447-luz-use-current-gpio-mt7621.patch
@@ -0,0 +1,604 @@
+--- a/drivers/gpio/gpio-mt7621.c
++++ b/drivers/gpio/gpio-mt7621.c
+@@ -1,337 +1,333 @@
++// SPDX-License-Identifier: GPL-2.0
+ /*
+- * This program is free software; you can redistribute it and/or modify it
+- * under the terms of the GNU General Public License version 2 as published
+- * by the Free Software Foundation.
+- *
+  * Copyright (C) 2009-2011 Gabor Juhos <juhosg@openwrt.org>
+  * Copyright (C) 2013 John Crispin <blogic@openwrt.org>
+  */
+
+-#include <linux/io.h>
+ #include <linux/err.h>
+-#include <linux/gpio.h>
++#include <linux/gpio/driver.h>
++#include <linux/interrupt.h>
++#include <linux/io.h>
+ #include <linux/module.h>
+ #include <linux/of_irq.h>
+-#include <linux/spinlock.h>
+-#include <linux/irqdomain.h>
+-#include <linux/interrupt.h>
+ #include <linux/platform_device.h>
++#include <linux/spinlock.h>
+
+-#define MTK_MAX_BANK		3
+-#define MTK_BANK_WIDTH		32
+-
+-enum mediatek_gpio_reg {
+-	GPIO_REG_CTRL = 0,
+-	GPIO_REG_POL,
+-	GPIO_REG_DATA,
+-	GPIO_REG_DSET,
+-	GPIO_REG_DCLR,
+-	GPIO_REG_REDGE,
+-	GPIO_REG_FEDGE,
+-	GPIO_REG_HLVL,
+-	GPIO_REG_LLVL,
+-	GPIO_REG_STAT,
+-	GPIO_REG_EDGE,
+-};
++#define MTK_BANK_CNT	3
++#define MTK_BANK_WIDTH	32
+
+-static void __iomem *mediatek_gpio_membase;
+-static int mediatek_gpio_irq;
+-static struct irq_domain *mediatek_gpio_irq_domain;
+-static atomic_t irq_refcount = ATOMIC_INIT(0);
++#define GPIO_BANK_STRIDE	0x04
++#define GPIO_REG_CTRL		0x00
++#define GPIO_REG_POL		0x10
++#define GPIO_REG_DATA		0x20
++#define GPIO_REG_DSET		0x30
++#define GPIO_REG_DCLR		0x40
++#define GPIO_REG_REDGE		0x50
++#define GPIO_REG_FEDGE		0x60
++#define GPIO_REG_HLVL		0x70
++#define GPIO_REG_LLVL		0x80
++#define GPIO_REG_STAT		0x90
++#define GPIO_REG_EDGE		0xA0
+
+ struct mtk_gc {
++	struct irq_chip irq_chip;
+ 	struct gpio_chip chip;
+ 	spinlock_t lock;
+ 	int bank;
+ 	u32 rising;
+ 	u32 falling;
+-} *gc_map[MTK_MAX_BANK];
+-
+-static inline struct mtk_gc
+-*to_mediatek_gpio(struct gpio_chip *chip)
+-{
+-	struct mtk_gc *mgc;
+-
+-	mgc = container_of(chip, struct mtk_gc, chip);
+-
+-	return mgc;
+-}
+-
+-static inline void
+-mtk_gpio_w32(struct mtk_gc *rg, u8 reg, u32 val)
+-{
+-	iowrite32(val, mediatek_gpio_membase + (reg * 0x10) + (rg->bank * 0x4));
+-}
+-
+-static inline u32
+-mtk_gpio_r32(struct mtk_gc *rg, u8 reg)
+-{
+-	return ioread32(mediatek_gpio_membase + (reg * 0x10) + (rg->bank * 0x4));
+-}
+-
+-static void
+-mediatek_gpio_set(struct gpio_chip *chip, unsigned offset, int value)
+-{
+-	struct mtk_gc *rg = to_mediatek_gpio(chip);
+-
+-	mtk_gpio_w32(rg, (value) ? GPIO_REG_DSET : GPIO_REG_DCLR, BIT(offset));
+-}
+-
+-static int
+-mediatek_gpio_get(struct gpio_chip *chip, unsigned offset)
+-{
+-	struct mtk_gc *rg = to_mediatek_gpio(chip);
+-
+-	return !!(mtk_gpio_r32(rg, GPIO_REG_DATA) & BIT(offset));
+-}
+-
+-static int
+-mediatek_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
+-{
+-	struct mtk_gc *rg = to_mediatek_gpio(chip);
+-	unsigned long flags;
+-	u32 t;
+-
+-	spin_lock_irqsave(&rg->lock, flags);
+-	t = mtk_gpio_r32(rg, GPIO_REG_CTRL);
+-	t &= ~BIT(offset);
+-	mtk_gpio_w32(rg, GPIO_REG_CTRL, t);
+-	spin_unlock_irqrestore(&rg->lock, flags);
+-
+-	return 0;
+-}
+-
+-static int
+-mediatek_gpio_direction_output(struct gpio_chip *chip,
+-					unsigned offset, int value)
+-{
+-	struct mtk_gc *rg = to_mediatek_gpio(chip);
+-	unsigned long flags;
+-	u32 t;
+-
+-	spin_lock_irqsave(&rg->lock, flags);
+-	t = mtk_gpio_r32(rg, GPIO_REG_CTRL);
+-	t |= BIT(offset);
+-	mtk_gpio_w32(rg, GPIO_REG_CTRL, t);
+-	mediatek_gpio_set(chip, offset, value);
+-	spin_unlock_irqrestore(&rg->lock, flags);
++	u32 hlevel;
++	u32 llevel;
++};
+
+-	return 0;
+-}
++/**
++ * struct mtk - state container for
++ * data of the platform driver. It is 3
++ * separate gpio-chip each one with its
++ * own irq_chip.
++ * @dev: device instance
++ * @base: memory base address
++ * @gpio_irq: irq number from the device tree
++ * @gc_map: array of the gpio chips
++ */
++struct mtk {
++	struct device *dev;
++	void __iomem *base;
++	int gpio_irq;
++	struct mtk_gc gc_map[MTK_BANK_CNT];
++};
+
+-static int
+-mediatek_gpio_get_direction(struct gpio_chip *chip, unsigned offset)
++static inline struct mtk_gc *
++to_mediatek_gpio(struct gpio_chip *chip)
+ {
+-	struct mtk_gc *rg = to_mediatek_gpio(chip);
+-	unsigned long flags;
+-	u32 t;
+-
+-	spin_lock_irqsave(&rg->lock, flags);
+-	t = mtk_gpio_r32(rg, GPIO_REG_CTRL);
+-	spin_unlock_irqrestore(&rg->lock, flags);
+-
+-	if (t & BIT(offset))
+-		return 0;
+-
+-	return 1;
++	return container_of(chip, struct mtk_gc, chip);
+ }
+
+-static int
+-mediatek_gpio_to_irq(struct gpio_chip *chip, unsigned pin)
++static inline void
++mtk_gpio_w32(struct mtk_gc *rg, u32 offset, u32 val)
+ {
+-	struct mtk_gc *rg = to_mediatek_gpio(chip);
++	struct gpio_chip *gc = &rg->chip;
++	struct mtk *mtk = gpiochip_get_data(gc);
+
+-	return irq_create_mapping(mediatek_gpio_irq_domain, pin + (rg->bank * MTK_BANK_WIDTH));
++	offset = (rg->bank * GPIO_BANK_STRIDE) + offset;
++	gc->write_reg(mtk->base + offset, val);
+ }
+
+-static int
+-mediatek_gpio_bank_probe(struct platform_device *pdev, struct device_node *bank)
++static inline u32
++mtk_gpio_r32(struct mtk_gc *rg, u32 offset)
+ {
+-	const __be32 *id = of_get_property(bank, "reg", NULL);
+-	struct mtk_gc *rg = devm_kzalloc(&pdev->dev,
+-				sizeof(struct mtk_gc), GFP_KERNEL);
+-
+-	if (!rg || !id || be32_to_cpu(*id) > MTK_MAX_BANK)
+-		return -ENOMEM;
+-
+-	gc_map[be32_to_cpu(*id)] = rg;
+-
+-	memset(rg, 0, sizeof(struct mtk_gc));
+-
+-	spin_lock_init(&rg->lock);
+-
+-	rg->chip.parent = &pdev->dev;
+-	rg->chip.label = dev_name(&pdev->dev);
+-	rg->chip.of_node = bank;
+-	rg->chip.base = MTK_BANK_WIDTH * be32_to_cpu(*id);
+-	rg->chip.ngpio = MTK_BANK_WIDTH;
+-	rg->chip.direction_input = mediatek_gpio_direction_input;
+-	rg->chip.direction_output = mediatek_gpio_direction_output;
+-	rg->chip.get_direction = mediatek_gpio_get_direction;
+-	rg->chip.get = mediatek_gpio_get;
+-	rg->chip.set = mediatek_gpio_set;
+-	if (mediatek_gpio_irq_domain)
+-		rg->chip.to_irq = mediatek_gpio_to_irq;
+-	rg->bank = be32_to_cpu(*id);
+-
+-	/* set polarity to low for all gpios */
+-	mtk_gpio_w32(rg, GPIO_REG_POL, 0);
+-
+-	dev_info(&pdev->dev, "registering %d gpios\n", rg->chip.ngpio);
++	struct gpio_chip *gc = &rg->chip;
++	struct mtk *mtk = gpiochip_get_data(gc);
+
+-	return gpiochip_add(&rg->chip);
++	offset = (rg->bank * GPIO_BANK_STRIDE) + offset;
++	return gc->read_reg(mtk->base + offset);
+ }
+
+-static void
+-mediatek_gpio_irq_handler(struct irq_desc *desc)
++static irqreturn_t
++mediatek_gpio_irq_handler(int irq, void *data)
+ {
+-	int i;
++	struct gpio_chip *gc = data;
++	struct mtk_gc *rg = to_mediatek_gpio(gc);
++	irqreturn_t ret = IRQ_NONE;
++	unsigned long pending;
++	int bit;
+
+-	for (i = 0; i < MTK_MAX_BANK; i++) {
+-		struct mtk_gc *rg = gc_map[i];
+-		unsigned long pending;
+-		int bit;
++	pending = mtk_gpio_r32(rg, GPIO_REG_STAT);
+
+-		if (!rg)
+-			continue;
++	for_each_set_bit(bit, &pending, MTK_BANK_WIDTH) {
++		u32 map = irq_find_mapping(gc->irqdomain, bit);
+
+-		pending = mtk_gpio_r32(rg, GPIO_REG_STAT);
+-
+-		for_each_set_bit(bit, &pending, MTK_BANK_WIDTH) {
+-			u32 map = irq_find_mapping(mediatek_gpio_irq_domain, (MTK_BANK_WIDTH * i) + bit);
+-
+-			generic_handle_irq(map);
+-			mtk_gpio_w32(rg, GPIO_REG_STAT, BIT(bit));
+-		}
++		generic_handle_irq(map);
++		mtk_gpio_w32(rg, GPIO_REG_STAT, BIT(bit));
++		ret |= IRQ_HANDLED;
+ 	}
++
++	return ret;
+ }
+
+ static void
+ mediatek_gpio_irq_unmask(struct irq_data *d)
+ {
++	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
++	struct mtk_gc *rg = to_mediatek_gpio(gc);
+ 	int pin = d->hwirq;
+-	int bank = pin / 32;
+-	struct mtk_gc *rg = gc_map[bank];
+ 	unsigned long flags;
+-	u32 rise, fall;
+-
+-	if (!rg)
+-		return;
++	u32 rise, fall, high, low;
+
++	spin_lock_irqsave(&rg->lock, flags);
+ 	rise = mtk_gpio_r32(rg, GPIO_REG_REDGE);
+ 	fall = mtk_gpio_r32(rg, GPIO_REG_FEDGE);
+-
+-	spin_lock_irqsave(&rg->lock, flags);
+-	mtk_gpio_w32(rg, GPIO_REG_REDGE, rise | (BIT(d->hwirq) & rg->rising));
+-	mtk_gpio_w32(rg, GPIO_REG_FEDGE, fall | (BIT(d->hwirq) & rg->falling));
++	high = mtk_gpio_r32(rg, GPIO_REG_HLVL);
++	low = mtk_gpio_r32(rg, GPIO_REG_LLVL);
++	mtk_gpio_w32(rg, GPIO_REG_REDGE, rise | (BIT(pin) & rg->rising));
++	mtk_gpio_w32(rg, GPIO_REG_FEDGE, fall | (BIT(pin) & rg->falling));
++	mtk_gpio_w32(rg, GPIO_REG_HLVL, high | (BIT(pin) & rg->hlevel));
++	mtk_gpio_w32(rg, GPIO_REG_LLVL, low | (BIT(pin) & rg->llevel));
+ 	spin_unlock_irqrestore(&rg->lock, flags);
+ }
+
+ static void
+ mediatek_gpio_irq_mask(struct irq_data *d)
+ {
++	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
++	struct mtk_gc *rg = to_mediatek_gpio(gc);
+ 	int pin = d->hwirq;
+-	int bank = pin / 32;
+-	struct mtk_gc *rg = gc_map[bank];
+ 	unsigned long flags;
+-	u32 rise, fall;
+-
+-	if (!rg)
+-		return;
++	u32 rise, fall, high, low;
+
++	spin_lock_irqsave(&rg->lock, flags);
+ 	rise = mtk_gpio_r32(rg, GPIO_REG_REDGE);
+ 	fall = mtk_gpio_r32(rg, GPIO_REG_FEDGE);
+-
+-	spin_lock_irqsave(&rg->lock, flags);
+-	mtk_gpio_w32(rg, GPIO_REG_FEDGE, fall & ~BIT(d->hwirq));
+-	mtk_gpio_w32(rg, GPIO_REG_REDGE, rise & ~BIT(d->hwirq));
++	high = mtk_gpio_r32(rg, GPIO_REG_HLVL);
++	low = mtk_gpio_r32(rg, GPIO_REG_LLVL);
++	mtk_gpio_w32(rg, GPIO_REG_FEDGE, fall & ~BIT(pin));
++	mtk_gpio_w32(rg, GPIO_REG_REDGE, rise & ~BIT(pin));
++	mtk_gpio_w32(rg, GPIO_REG_HLVL, high & ~BIT(pin));
++	mtk_gpio_w32(rg, GPIO_REG_LLVL, low & ~BIT(pin));
+ 	spin_unlock_irqrestore(&rg->lock, flags);
+ }
+
+ static int
+ mediatek_gpio_irq_type(struct irq_data *d, unsigned int type)
+ {
++	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
++	struct mtk_gc *rg = to_mediatek_gpio(gc);
+ 	int pin = d->hwirq;
+-	int bank = pin / 32;
+-	struct mtk_gc *rg = gc_map[bank];
+-	u32 mask = BIT(d->hwirq);
+-
+-	if (!rg)
+-		return -1;
++	u32 mask = BIT(pin);
+
+ 	if (type == IRQ_TYPE_PROBE) {
+-		if ((rg->rising | rg->falling) & mask)
++		if ((rg->rising | rg->falling |
++		     rg->hlevel | rg->llevel) & mask)
+ 			return 0;
+
+ 		type = IRQ_TYPE_EDGE_RISING | IRQ_TYPE_EDGE_FALLING;
+ 	}
+
+-	if (type & IRQ_TYPE_EDGE_RISING)
+-		rg->rising |= mask;
+-	else
+-		rg->rising &= ~mask;
++	rg->rising &= ~mask;
++	rg->falling &= ~mask;
++	rg->hlevel &= ~mask;
++	rg->llevel &= ~mask;
+
+-	if (type & IRQ_TYPE_EDGE_FALLING)
++	switch (type & IRQ_TYPE_SENSE_MASK) {
++	case IRQ_TYPE_EDGE_BOTH:
++		rg->rising |= mask;
++		rg->falling |= mask;
++		break;
++	case IRQ_TYPE_EDGE_RISING:
++		rg->rising |= mask;
++		break;
++	case IRQ_TYPE_EDGE_FALLING:
+ 		rg->falling |= mask;
+-	else
+-		rg->falling &= ~mask;
++		break;
++	case IRQ_TYPE_LEVEL_HIGH:
++		rg->hlevel |= mask;
++		break;
++	case IRQ_TYPE_LEVEL_LOW:
++		rg->llevel |= mask;
++		break;
++	}
+
+ 	return 0;
+ }
+
+-static struct irq_chip mediatek_gpio_irq_chip = {
+-	.name		= "GPIO",
+-	.irq_unmask	= mediatek_gpio_irq_unmask,
+-	.irq_mask	= mediatek_gpio_irq_mask,
+-	.irq_mask_ack	= mediatek_gpio_irq_mask,
+-	.irq_set_type	= mediatek_gpio_irq_type,
+-};
++static int
++mediatek_gpio_xlate(struct gpio_chip *chip,
++		    const struct of_phandle_args *spec, u32 *flags)
++{
++	int gpio = spec->args[0];
++	struct mtk_gc *rg = to_mediatek_gpio(chip);
++
++	if (rg->bank != gpio / MTK_BANK_WIDTH)
++		return -EINVAL;
++
++	if (flags)
++		*flags = spec->args[1];
++
++	return gpio % MTK_BANK_WIDTH;
++}
+
+ static int
+-mediatek_gpio_gpio_map(struct irq_domain *d, unsigned int irq, irq_hw_number_t hw)
++mediatek_gpio_bank_probe(struct device *dev,
++			 struct device_node *node, int bank, u32 base)
+ {
+-	irq_set_chip_and_handler(irq, &mediatek_gpio_irq_chip, handle_level_irq);
+-	irq_set_handler_data(irq, d);
++	struct mtk *mtk = dev_get_drvdata(dev);
++	struct mtk_gc *rg;
++	void __iomem *dat, *set, *ctrl, *diro;
++	int ret;
++
++	rg = &mtk->gc_map[bank];
++	memset(rg, 0, sizeof(*rg));
++
++	spin_lock_init(&rg->lock);
++	rg->chip.of_node = node;
++	rg->bank = bank;
++
++	dat = mtk->base + GPIO_REG_DATA + (rg->bank * GPIO_BANK_STRIDE);
++	set = mtk->base + GPIO_REG_DSET + (rg->bank * GPIO_BANK_STRIDE);
++	ctrl = mtk->base + GPIO_REG_DCLR + (rg->bank * GPIO_BANK_STRIDE);
++	diro = mtk->base + GPIO_REG_CTRL + (rg->bank * GPIO_BANK_STRIDE);
++
++	ret = bgpio_init(&rg->chip, dev, 4,
++			 dat, set, ctrl, diro, NULL, 0);
++	if (ret) {
++		dev_err(dev, "bgpio_init() failed\n");
++		return ret;
++	}
++
++	rg->chip.base = base;
++	rg->chip.of_gpio_n_cells = 2;
++	rg->chip.of_xlate = mediatek_gpio_xlate;
++	rg->chip.label = devm_kasprintf(dev, GFP_KERNEL, "%s-bank%d",
++					dev_name(dev), bank);
++	if (!rg->chip.label)
++		return -ENOMEM;
++
++	ret = devm_gpiochip_add_data(dev, &rg->chip, mtk);
++	if (ret < 0) {
++		dev_err(dev, "Could not register gpio %d, ret=%d\n",
++			rg->chip.ngpio, ret);
++		return ret;
++	}
++
++	rg->irq_chip.name = dev_name(dev);
++	rg->irq_chip.parent_device = dev;
++	rg->irq_chip.irq_unmask = mediatek_gpio_irq_unmask;
++	rg->irq_chip.irq_mask = mediatek_gpio_irq_mask;
++	rg->irq_chip.irq_mask_ack = mediatek_gpio_irq_mask;
++	rg->irq_chip.irq_set_type = mediatek_gpio_irq_type;
++
++	if (mtk->gpio_irq) {
++		/*
++		 * Manually request the irq here instead of passing
++		 * a flow-handler to gpiochip_set_chained_irqchip,
++		 * because the irq is shared.
++		 */
++		ret = devm_request_irq(dev, mtk->gpio_irq,
++				       mediatek_gpio_irq_handler, IRQF_SHARED,
++				       rg->chip.label, &rg->chip);
++
++		if (ret) {
++			dev_err(dev, "Error requesting IRQ %d: %d\n",
++				mtk->gpio_irq, ret);
++			return ret;
++		}
++
++		ret = gpiochip_irqchip_add(&rg->chip, &rg->irq_chip,
++					   0, handle_simple_irq, IRQ_TYPE_NONE);
++		if (ret) {
++			dev_err(dev, "failed to add gpiochip_irqchip\n");
++			return ret;
++		}
++
++		gpiochip_set_chained_irqchip(&rg->chip, &rg->irq_chip,
++					     mtk->gpio_irq, NULL);
++	}
++
++	/* set polarity to low for all gpios */
++	mtk_gpio_w32(rg, GPIO_REG_POL, 0);
++
++	dev_info(dev, "registering %d gpios\n", rg->chip.ngpio);
+
+ 	return 0;
+ }
+
+-static const struct irq_domain_ops irq_domain_ops = {
+-	.xlate = irq_domain_xlate_onecell,
+-	.map = mediatek_gpio_gpio_map,
+-};
+-
+ static int
+ mediatek_gpio_probe(struct platform_device *pdev)
+ {
+-	struct device_node *bank, *np = pdev->dev.of_node;
+ 	struct resource *res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
++	struct device *dev = &pdev->dev;
++	struct device_node *np = dev->of_node;
++	struct mtk *mtk;
++	int i;
++	u32 base;
++	int ret;
+
+-	mediatek_gpio_membase = devm_ioremap_resource(&pdev->dev, res);
+-	if (IS_ERR(mediatek_gpio_membase))
+-		return PTR_ERR(mediatek_gpio_membase);
+-
+-	mediatek_gpio_irq = irq_of_parse_and_map(np, 0);
+-	if (mediatek_gpio_irq) {
+-		mediatek_gpio_irq_domain = irq_domain_add_linear(np,
+-			MTK_MAX_BANK * MTK_BANK_WIDTH,
+-			&irq_domain_ops, NULL);
+-		if (!mediatek_gpio_irq_domain)
+-			dev_err(&pdev->dev, "irq_domain_add_linear failed\n");
+-	}
+-
+-	for_each_child_of_node(np, bank)
+-		if (of_device_is_compatible(bank, "mtk,mt7621-gpio-bank"))
+-			mediatek_gpio_bank_probe(pdev, bank);
++	mtk = devm_kzalloc(dev, sizeof(*mtk), GFP_KERNEL);
++	if (!mtk)
++		return -ENOMEM;
+
+-	if (mediatek_gpio_irq_domain)
+-		irq_set_chained_handler(mediatek_gpio_irq, mediatek_gpio_irq_handler);
++	mtk->base = devm_ioremap_resource(dev, res);
++	if (IS_ERR(mtk->base))
++		return PTR_ERR(mtk->base);
++
++	mtk->gpio_irq = irq_of_parse_and_map(np, 0);
++	mtk->dev = dev;
++	platform_set_drvdata(pdev, mtk);
++
++	base = -1; /* automatic by default */
++	of_property_read_u32(np, "mediatek,gpio-base", &base); /* but support setting base in DT */
++
++	for (i = 0; i < MTK_BANK_CNT; i++) {
++		ret = mediatek_gpio_bank_probe(dev, np, i, base<0 ? -1 : base+32*i);
++		if (ret)
++			return ret;
++	}
+
+ 	return 0;
+ }
+
+ static const struct of_device_id mediatek_gpio_match[] = {
+-	{ .compatible = "mtk,mt7621-gpio" },
++	{ .compatible = "mediatek,mt7621-gpio" },
+ 	{},
+ };
+ MODULE_DEVICE_TABLE(of, mediatek_gpio_match);
+@@ -340,15 +336,8 @@ static struct platform_driver mediatek_g
+ 	.probe = mediatek_gpio_probe,
+ 	.driver = {
+ 		.name = "mt7621_gpio",
+-		.owner = THIS_MODULE,
+ 		.of_match_table = mediatek_gpio_match,
+ 	},
+ };
+
+-static int __init
+-mediatek_gpio_init(void)
+-{
+-	return platform_driver_register(&mediatek_gpio_driver);
+-}
+-
+-subsys_initcall(mediatek_gpio_init);
++builtin_platform_driver(mediatek_gpio_driver);
+\ No newline at end of file
+--- a/drivers/gpio/Kconfig
++++ b/drivers/gpio/Kconfig
+@@ -301,6 +301,8 @@ config GPIO_MENZ127
+ config GPIO_MT7621
+ 	bool "Mediatek GPIO Support"
+ 	depends on SOC_MT7620 || SOC_MT7621
++	select GPIO_GENERIC
++	select GPIOLIB_IRQCHIP
+ 	help
+ 	  Say yes here to support the Mediatek SoC GPIO device
+
--- a/target/linux/ramips/dts/OMEGA2.dtsi
+++ b/target/linux/ramips/dts/OMEGA2.dtsi
@@ -1,4 +1,4 @@
-#include "mt7628an.dtsi"
+#include "mt7688newgpio.dtsi"

 #include <dt-bindings/gpio/gpio.h>
 #include <dt-bindings/input/input.h>
@@ -21,7 +21,7 @@
 		compatible = "gpio-leds";

 		system_led: system {
-			gpios = <&gpio1 12 GPIO_ACTIVE_LOW>;
+			gpios = <&gpioc 44 GPIO_ACTIVE_LOW>;
 		};
 	};

@@ -31,7 +31,7 @@

 		reset {
 			label = "reset";
-			gpios = <&gpio1 6 GPIO_ACTIVE_HIGH>;
+			gpios = <&gpioc 38 GPIO_ACTIVE_HIGH>;
 			linux,code = <KEY_RESTART>;
 		};
 	};
@@ -91,14 +91,6 @@
 	};
 };

-&gpio1 {
-	status = "okay";
-};
-
-&gpio2 {
-	status = "okay";
-};
-
 &spi0 {
 	status = "okay";

--- /dev/null
+++ b/target/linux/ramips/patches-4.14/0447b-luz-fix-irq-domain-select-gpio-mt7621.patch
@@ -0,0 +1,66 @@
+--- a/drivers/gpio/gpio-mt7621.c
++++ b/drivers/gpio/gpio-mt7621.c
+@@ -32,6 +32,7 @@
+ struct mtk_gc {
+ 	struct irq_chip irq_chip;
+ 	struct gpio_chip chip;
++	struct irq_domain_ops irq_ops; /* private version needed */
+ 	spinlock_t lock;
+ 	int bank;
+ 	u32 rising;
+@@ -206,6 +207,33 @@ mediatek_gpio_xlate(struct gpio_chip *ch
+ 	return gpio % MTK_BANK_WIDTH;
+ }
+
++
++static int mediatek_domain_select(struct irq_domain *d, struct irq_fwspec *fwspec,
++					enum irq_domain_bus_token bus_token)
++{
++	struct gpio_chip *chip = d->host_data; /* gpiolib links the gpiochip into the domain via host_data */
++	struct mtk_gc *rg = to_mediatek_gpio(chip);
++	struct fwnode_handle *fwnode = fwspec->fwnode;
++	int chipirq;
++
++	if (!d || !fwspec || fwspec->param_count<1)
++		return 0;
++
++	/* check node */
++	if (fwnode==NULL || d->fwnode!=fwnode || (bus_token!=DOMAIN_BUS_ANY && d->bus_token!=bus_token))
++		return 0; /* wrong node */
++
++	/* check bank within node */
++	chipirq = fwspec->param[0];
++
++	if (rg->bank != chipirq / MTK_BANK_WIDTH)
++		return 0; /* wrong bank */
++
++	fwspec->param[0] = chipirq % MTK_BANK_WIDTH; // change the spec to offset within chip
++	return 1;
++}
++
++
+ static int
+ mediatek_gpio_bank_probe(struct device *dev,
+ 			 struct device_node *node, int bank, u32 base)
+@@ -278,6 +306,12 @@ mediatek_gpio_bank_probe(struct device *
+ 			dev_err(dev, "failed to add gpiochip_irqchip\n");
+ 			return ret;
+ 		}
++		/* now exchange the ops of the domain, because we need to have select */
++		/* - copy the existing ops gpiolib has provided */
++		memcpy(&rg->irq_ops, rg->chip.irqdomain->ops, sizeof(rg->irq_ops));
++		rg->irq_ops.select = mediatek_domain_select;
++		/* - replace the ops with our version */
++		rg->chip.irqdomain->ops = &rg->irq_ops;
+
+ 		gpiochip_set_chained_irqchip(&rg->chip, &rg->irq_chip,
+ 					     mtk->gpio_irq, NULL);
+@@ -286,7 +320,7 @@ mediatek_gpio_bank_probe(struct device *
+ 	/* set polarity to low for all gpios */
+ 	mtk_gpio_w32(rg, GPIO_REG_POL, 0);
+
+-	dev_info(dev, "registering %d gpios\n", rg->chip.ngpio);
++	dev_info(dev, "registering %d gpios in bank %d\n", rg->chip.ngpio, bank);
+
+ 	return 0;
+ }
--- /dev/null
+++ b/target/linux/ramips/dts/mt7688newgpio.dtsi
@@ -0,0 +1,497 @@
+/ {
+	#address-cells = <1>;
+	#size-cells = <1>;
+	compatible = "mediatek,mt7628an-soc";
+
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		cpu@0 {
+			compatible = "mips,mips24KEc";
+			reg = <0>;
+		};
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,57600";
+	};
+
+	aliases {
+		serial0 = &uartlite;
+	};
+
+	cpuintc: cpuintc {
+		#address-cells = <0>;
+		#interrupt-cells = <1>;
+		interrupt-controller;
+		compatible = "mti,cpu-interrupt-controller";
+	};
+
+	palmbus: palmbus@10000000 {
+		compatible = "palmbus";
+		reg = <0x10000000 0x200000>;
+		ranges = <0x0 0x10000000 0x1FFFFF>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+
+		sysc: sysc@0 {
+			compatible = "ralink,mt7620a-sysc", "syscon";
+			reg = <0x0 0x100>;
+		};
+
+		watchdog: watchdog@100 {
+			compatible = "ralink,mt7628an-wdt", "mediatek,mt7621-wdt";
+			reg = <0x100 0x30>;
+
+			resets = <&rstctrl 8>;
+			reset-names = "wdt";
+
+			interrupt-parent = <&intc>;
+			interrupts = <24>;
+		};
+
+		intc: intc@200 {
+			compatible = "ralink,mt7628an-intc", "ralink,rt2880-intc";
+			reg = <0x200 0x100>;
+
+			resets = <&rstctrl 9>;
+			reset-names = "intc";
+
+			interrupt-controller;
+			#interrupt-cells = <1>;
+
+			interrupt-parent = <&cpuintc>;
+			interrupts = <2>;
+
+			ralink,intc-registers = <0x9c 0xa0
+						 0x6c 0xa4
+						 0x80 0x78>;
+		};
+
+		memc: memc@300 {
+			compatible = "ralink,mt7620a-memc", "ralink,rt3050-memc";
+			reg = <0x300 0x100>;
+
+			resets = <&rstctrl 20>;
+			reset-names = "mc";
+
+			interrupt-parent = <&intc>;
+			interrupts = <3>;
+		};
+
+
+		gpioc: gpio@600 {
+			compatible = "mediatek,mt7621-gpio";
+			reg = <0x600 0x100>;
+
+			#gpio-cells = <2>;
+			#interrupt-cells = <2>;
+			gpio-controller;
+			mediatek,gpio-base = <0>;
+			interrupt-controller;
+			interrupt-parent = <&intc>;
+			interrupts = <6>;
+		};
+
+
+		i2c: i2c@900 {
+			compatible = "mediatek,mt7621-i2c";
+			reg = <0x900 0x100>;
+
+			resets = <&rstctrl 16>;
+			reset-names = "i2c";
+
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			status = "disabled";
+
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c_pins>;
+		};
+
+		i2s: i2s@a00 {
+			compatible = "mediatek,mt7628-i2s";
+			reg = <0xa00 0x100>;
+
+			resets = <&rstctrl 17>;
+			reset-names = "i2s";
+
+			interrupt-parent = <&intc>;
+			interrupts = <10>;
+
+			txdma-req = <2>;
+			rxdma-req = <3>;
+
+			dmas = <&gdma 4>,
+				<&gdma 6>;
+			dma-names = "tx", "rx";
+
+			status = "disabled";
+		};
+
+		spi0: spi@b00 {
+			compatible = "ralink,mt7621-spi";
+			reg = <0xb00 0x100>;
+
+			resets = <&rstctrl 18>;
+			reset-names = "spi";
+
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			pinctrl-names = "default";
+			pinctrl-0 = <&spi_pins>;
+
+			status = "disabled";
+		};
+
+		uartlite: uartlite@c00 {
+			compatible = "ns16550a";
+			reg = <0xc00 0x100>;
+
+			reg-shift = <2>;
+			reg-io-width = <4>;
+			no-loopback-test;
+
+			clock-frequency = <40000000>;
+
+			resets = <&rstctrl 12>;
+			reset-names = "uartl";
+
+			interrupt-parent = <&intc>;
+			interrupts = <20>;
+
+			pinctrl-names = "default";
+			pinctrl-0 = <&uart0_pins>;
+		};
+
+		uart1: uart1@d00 {
+			compatible = "ns16550a";
+			reg = <0xd00 0x100>;
+
+			reg-shift = <2>;
+			reg-io-width = <4>;
+			no-loopback-test;
+
+			clock-frequency = <40000000>;
+
+			resets = <&rstctrl 19>;
+			reset-names = "uart1";
+
+			interrupt-parent = <&intc>;
+			interrupts = <21>;
+
+			pinctrl-names = "default";
+			pinctrl-0 = <&uart1_pins>;
+
+			status = "disabled";
+		};
+
+		uart2: uart2@e00 {
+			compatible = "ns16550a";
+			reg = <0xe00 0x100>;
+
+			reg-shift = <2>;
+			reg-io-width = <4>;
+			no-loopback-test;
+
+			clock-frequency = <40000000>;
+
+			resets = <&rstctrl 20>;
+			reset-names = "uart2";
+
+			interrupt-parent = <&intc>;
+			interrupts = <22>;
+
+			pinctrl-names = "default";
+			pinctrl-0 = <&uart2_pins>;
+
+			status = "disabled";
+		};
+
+		pwm: pwm@5000 {
+			compatible = "mediatek,mt7628-pwm";
+			reg = <0x5000 0x1000>;
+			#pwm-cells = <2>;
+
+			resets = <&rstctrl 31>;
+			reset-names = "pwm";
+
+			interrupt-parent = <&intc>;
+			interrupts = <26>;
+
+			status = "disabled";
+		};
+
+		pcm: pcm@2000 {
+			compatible = "ralink,mt7620a-pcm";
+			reg = <0x2000 0x800>;
+
+			resets = <&rstctrl 11>;
+			reset-names = "pcm";
+
+			interrupt-parent = <&intc>;
+			interrupts = <4>;
+
+			status = "disabled";
+		};
+
+		gdma: gdma@2800 {
+			compatible = "ralink,rt3883-gdma";
+			reg = <0x2800 0x800>;
+
+			resets = <&rstctrl 14>;
+			reset-names = "dma";
+
+			interrupt-parent = <&intc>;
+			interrupts = <7>;
+
+			#dma-cells = <1>;
+			#dma-channels = <16>;
+			#dma-requests = <16>;
+
+			status = "disabled";
+		};
+	};
+
+	pinctrl: pinctrl {
+		compatible = "ralink,rt2880-pinmux";
+		pinctrl-names = "default";
+		pinctrl-0 = <&state_default>;
+
+		state_default: pinctrl0 {
+		};
+
+		spi_pins: spi_pins {
+			spi_pins {
+				ralink,group = "spi";
+				ralink,function = "spi";
+			};
+		};
+
+		spi_cs1_pins: spi_cs1 {
+			spi_cs1 {
+				ralink,group = "spi cs1";
+				ralink,function = "spi cs1";
+			};
+		};
+
+		i2c_pins: i2c_pins {
+			i2c_pins {
+				ralink,group = "i2c";
+				ralink,function = "i2c";
+			};
+		};
+
+		i2s_pins: i2s {
+			i2s {
+				ralink,group = "i2s";
+				ralink,function = "i2s";
+			};
+		};
+
+		uart0_pins: uartlite {
+			uartlite {
+				ralink,group = "uart0";
+				ralink,function = "uart0";
+			};
+		};
+
+		uart1_pins: uart1 {
+			uart1 {
+				ralink,group = "uart1";
+				ralink,function = "uart1";
+			};
+		};
+
+		uart2_pins: uart2 {
+			uart2 {
+				ralink,group = "uart2";
+				ralink,function = "uart2";
+			};
+		};
+
+		sdxc_pins: sdxc {
+			sdxc {
+				ralink,group = "sdmode";
+				ralink,function = "sdxc";
+			};
+		};
+
+		pwm0_pins: pwm0 {
+			pwm0 {
+				ralink,group = "pwm0";
+				ralink,function = "pwm0";
+			};
+		};
+
+		pwm1_pins: pwm1 {
+			pwm1 {
+				ralink,group = "pwm1";
+				ralink,function = "pwm1";
+			};
+		};
+
+		pcm_i2s_pins: pcm_i2s {
+			pcm_i2s {
+				ralink,group = "i2s";
+				ralink,function = "pcm";
+			};
+		};
+
+		refclk_pins: refclk {
+			refclk {
+				ralink,group = "refclk";
+				ralink,function = "refclk";
+			};
+		};
+	};
+
+	rstctrl: rstctrl {
+		compatible = "ralink,mt7620a-reset", "ralink,rt2880-reset";
+		#reset-cells = <1>;
+	};
+
+	clkctrl: clkctrl {
+		compatible = "ralink,rt2880-clock";
+		#clock-cells = <1>;
+	};
+
+	usbphy: usbphy@10120000 {
+		compatible = "mediatek,mt7628-usbphy", "mediatek,mt7620-usbphy";
+		reg = <0x10120000 0x1000>;
+		#phy-cells = <0>;
+
+		ralink,sysctl = <&sysc>;
+		resets = <&rstctrl 22 &rstctrl 25>;
+		reset-names = "host", "device";
+		clocks = <&clkctrl 22 &clkctrl 25>;
+		clock-names = "host", "device";
+	};
+
+	sdhci: sdhci@10130000 {
+		compatible = "ralink,mt7620-sdhci";
+		reg = <0x10130000 0x4000>;
+
+		interrupt-parent = <&intc>;
+		interrupts = <14>;
+
+		pinctrl-names = "default";
+		pinctrl-0 = <&sdxc_pins>;
+
+		status = "disabled";
+	};
+
+	ehci: ehci@101c0000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "generic-ehci";
+		reg = <0x101c0000 0x1000>;
+
+		phys = <&usbphy>;
+		phy-names = "usb";
+
+		interrupt-parent = <&intc>;
+		interrupts = <18>;
+
+		ehci_port1: port@1 {
+			reg = <1>;
+			#trigger-source-cells = <0>;
+		};
+	};
+
+	ohci: ohci@101c1000 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "generic-ohci";
+		reg = <0x101c1000 0x1000>;
+
+		phys = <&usbphy>;
+		phy-names = "usb";
+
+		interrupt-parent = <&intc>;
+		interrupts = <18>;
+
+		ohci_port1: port@1 {
+			reg = <1>;
+			#trigger-source-cells = <0>;
+		};
+	};
+
+	ethernet: ethernet@10100000 {
+		compatible = "ralink,rt5350-eth";
+		reg = <0x10100000 0x10000>;
+
+		interrupt-parent = <&cpuintc>;
+		interrupts = <5>;
+
+		resets = <&rstctrl 21 &rstctrl 23>;
+		reset-names = "fe", "esw";
+
+		mediatek,switch = <&esw>;
+	};
+
+	esw: esw@10110000 {
+		compatible = "mediatek,mt7628-esw", "ralink,rt3050-esw";
+		reg = <0x10110000 0x8000>;
+
+		resets = <&rstctrl 23>;
+		reset-names = "esw";
+
+		interrupt-parent = <&intc>;
+		interrupts = <17>;
+	};
+
+	pcie: pcie@10140000 {
+		compatible = "mediatek,mt7620-pci";
+		reg = <0x10140000 0x100
+			0x10142000 0x100>;
+
+		#address-cells = <3>;
+		#size-cells = <2>;
+
+		interrupt-parent = <&cpuintc>;
+		interrupts = <4>;
+
+		resets = <&rstctrl 26 &rstctrl 27>;
+		reset-names = "pcie0", "pcie1";
+		clocks = <&clkctrl 26 &clkctrl 27>;
+		clock-names = "pcie0", "pcie1";
+
+		status = "disabled";
+
+		device_type = "pci";
+
+		bus-range = <0 255>;
+		ranges = <
+			0x02000000 0 0x00000000 0x20000000 0 0x10000000 /* pci memory */
+			0x01000000 0 0x00000000 0x10160000 0 0x00010000 /* io space */
+		>;
+
+		pcie0: pcie@0,0 {
+			reg = <0x0000 0 0 0 0>;
+
+			#address-cells = <3>;
+			#size-cells = <2>;
+
+			device_type = "pci";
+
+			ranges;
+		};
+	};
+
+	wmac: wmac@10300000 {
+		compatible = "mediatek,mt7628-wmac";
+		reg = <0x10300000 0x100000>;
+
+		interrupt-parent = <&cpuintc>;
+		interrupts = <6>;
+
+		status = "disabled";
+
+		mediatek,mtd-eeprom = <&factory 0x0000>;
+	};
+};
